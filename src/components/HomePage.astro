---
import Layout from '../layouts/Layout.astro';
import profileImage from '../assets/me.png';
import { SUPPORTED_LOCALES, translations, defaultLocale, type Locale } from '../i18n/translations';

const iconMap = {
	status: 'ri-briefcase-smile-line',
	highlight: 'ri-sparkling-line',
	experience: 'ri-award-line',
	stack: 'ri-tools-line',
	contact: 'ri-hand-heart-line',
	mail: 'ri-mail-send-line',
	github: 'ri-github-line',
	linkedin: 'ri-linkedin-line',
	frontend: 'ri-brush-line',
	backend: 'ri-database-2-line',
	practice: 'ri-shield-keyhole-line',
	badge: 'ri-compass-3-line',
} as const;

const { locale } = Astro.props as { locale: Locale };
const t = translations[locale];

const languageLinks = SUPPORTED_LOCALES.map((code) => ({
	lang: code,
	label: t.layout.languageNames[code],
	href: code === defaultLocale ? '/' : `/${code}/`,
	active: code === locale,
}));

const pathPrefix = locale === defaultLocale ? '' : `/${locale}`;
const journalLink = locale === defaultLocale ? '/jurnal/' : `/${locale}/journal/`;

const navLinks = [
	{
		label: t.layout.learningJourneyLabel,
		href: journalLink,
		active: false,
	},
	{
		label: t.layout.knowledgeBaseLabel,
		href: `${pathPrefix}/knowledge-base/`,
		active: false,
	},
	{
		label: t.layout.webtoolsLabel,
		href: `${pathPrefix}/webtools/`,
		active: false,
	},
];

const contactChannels = [
	{
		key: 'email',
		label: t.contact.channels.email,
		value: 'heritechie@gmail.com',
		href: 'mailto:heritechie@gmail.com',
		icon: iconMap.mail,
	},
	{
		key: 'github',
		label: t.contact.channels.github,
		value: 'github.com/heritechie',
		href: 'https://github.com/heritechie',
		icon: iconMap.github,
	},
	{
		key: 'linkedin',
		label: t.contact.channels.linkedin,
		value: 'linkedin.com/in/heritechie',
		href: 'https://linkedin.com/in/heritechie',
		icon: iconMap.linkedin,
	},
] as const;

const deliverables = t.deliverables.items;
---

<Layout
	title={t.meta.title}
	description={t.meta.description}
	brand={t.layout.brand}
	locale={locale}
	languageLinks={languageLinks}
	navLinks={navLinks}
	navLabel={t.layout.primaryNavLabel}
	mobileMenuLabel={t.layout.mobileMenuLabel}
	switcherLabel={t.layout.languageSwitcherLabel}
	themeToggleLabel={t.layout.themeToggleLabel}
>
	<section class="hero">
		<div class="hero__content">
			<div class="hero__meta">
				<span class="hero__status">
					<span class="icon" aria-hidden="true"><i class={`ri ${iconMap.status}`}></i></span>
					{t.hero.status}
				</span>
				<h1>{t.hero.name}</h1>
				<p class="hero__subtitle">{t.hero.subtitle}</p>
			</div>

			<div class="hero__summary">
				<p>{t.hero.intro}</p>

				<ul class="hero__highlights">
					{t.hero.highlights.map((item) => (
						<li>
							<span class="icon" aria-hidden="true"><i class={`ri ${iconMap.highlight}`}></i></span>
							<span>{item}</span>
						</li>
					))}
				</ul>
			</div>
		</div>

		<aside class="hero__portrait">
			<div class="hero__portrait-frame">
				<img src={profileImage.src} alt={t.hero.portraitAlt} loading="lazy" width="340" height="420" />
			</div>
			<div class="hero__badge">
				<span class="icon" aria-hidden="true"><i class={`ri ${iconMap.badge}`}></i></span>
				<span>{t.hero.badge}</span>
			</div>
		</aside>
	</section>

	<section class="deliverables" id="deliverables">
		<div class="deliverables__header">
			<h2 class="section-title">
				<span class="icon" aria-hidden="true"><i class="ri-rocket-2-line"></i></span>
				{t.deliverables.title}
			</h2>
			<p>{t.deliverables.intro}</p>
		</div>
		<div class="deliverables__grid">
			{deliverables.map((item) => (
				<article class="deliverable-card">
					<span class="icon deliverable-card__icon" aria-hidden="true"><i class={`ri ${item.icon}`}></i></span>
					<h3>{item.title}</h3>
					<p>{item.description}</p>
				</article>
			))}
		</div>
	</section>

	<section class="stack" id="toolkit">
		<h2 class="section-title">
			<span class="icon" aria-hidden="true"><i class={`ri ${iconMap.stack}`}></i></span>
			{t.stack.title}
		</h2>
		<p>{t.stack.intro}</p>
		<div class="stack__grid">
			{t.stack.categories.map((category, index) => {
				const icon =
					index === 0 ? iconMap.frontend : index === 1 ? iconMap.backend : iconMap.practice;
				return (
					<article class="stack-card">
						<span class="stack-card__icon icon" aria-hidden="true"><i class={`ri ${icon}`}></i></span>
						<h3>{category.title}</h3>
						<ul>
							{category.items.map((item) => (
								<li>{item}</li>
							))}
						</ul>
					</article>
				);
			})}
		</div>
	</section>

	<section class="contact" id="contact">
		<h2 class="section-title">
			<span class="icon" aria-hidden="true"><i class={`ri ${iconMap.contact}`}></i></span>
			{t.contact.title}
		</h2>
		<p>{t.contact.intro}</p>
		<div class="contact__grid">
			{contactChannels.map((channel) => (
		<a
			class="contact-card"
			href={channel.href}
			target={channel.href.startsWith('http') ? '_blank' : undefined}
			rel="noopener"
		>
			<span class="label">
				<i class={`ri ${channel.icon}`} aria-hidden="true"></i>
				<span>{channel.label}</span>
			</span>
			<span class="value">{channel.value}</span>
		</a>
		))}
	</div>
</section>
</Layout>

<style>
	.hero {
		display: grid;
		gap: 36px;
		align-items: center;
		grid-template-areas:
			'portrait'
			'content';
	}

	.hero__content {
		display: grid;
		gap: 28px;
		grid-area: content;
	}

	.hero__meta {
		display: grid;
		gap: 12px;
	}

	.hero__status {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		padding: 6px 16px;
		border-radius: 999px;
		border: 1px solid var(--glass-stroke);
		background: var(--surface-highlight);
		color: var(--text-muted);
		font-size: 0.9rem;
		letter-spacing: 0.04em;
	}

	h1 {
		margin: 0;
		font-size: clamp(3.3rem, 6vw, 4rem);
		letter-spacing: -0.02em;
		font-family: var(--font-display);
	}

	.hero__subtitle {
		margin: 0;
		max-width: 46ch;
		font-size: 1.25rem;
		color: var(--text-muted);
	}

	.hero__summary {
		display: grid;
		gap: 24px;
	}

	.hero__summary > p {
		margin: 0;
		font-size: 1.12rem;
		color: var(--text-muted);
	}

	.hero__highlights {
		margin: 0;
		padding: 0;
		list-style: none;
		display: grid;
		gap: 14px;
	}

	.hero__highlights li {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		font-size: 1.05rem;
		color: var(--text-main);
	}

	.hero__cta {
		display: flex;
		gap: 14px;
		flex-wrap: wrap;
	}

	.hero__portrait {
		position: relative;
		display: grid;
		gap: 16px;
		justify-items: center;
		grid-area: portrait;
	}

	.hero__portrait-frame {
		width: min(340px, 100%);
		display: grid;
		place-items: center;
	}

	.hero__portrait-frame img {
		width: 100%;
		height: auto;
		border-radius: 32px;
		box-shadow: 0 36px 64px rgba(0, 0, 0, 0.35);
	}

	.hero__badge {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		padding: 10px 16px;
		border-radius: 999px;
		background: var(--surface-highlight);
		border: 1px solid var(--glass-stroke);
		color: var(--text-muted);
		font-size: 0.95rem;
	}

	.section-title {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		margin: 0 0 16px;
		font-size: clamp(1.9rem, 4vw, 2.4rem);
		font-family: var(--font-display);
	}

	.experience p {
		margin: 0;
		color: var(--text-muted);
		font-size: 1.1rem;
		max-width: 70ch;
	}

	.deliverables__header {
		display: grid;
		gap: 12px;
		margin-bottom: 22px;
	}

	.deliverables__header p {
		margin: 0;
		color: var(--text-muted);
		max-width: 60ch;
	}

	.deliverables__grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
		gap: 18px;
	}

	.deliverable-card {
		display: grid;
		gap: 12px;
		padding: 22px;
		border-radius: 22px;
		background: var(--surface-card);
		border: 1px solid var(--glass-stroke);
		box-shadow: var(--shadow-soft);
	}

	.stack__grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
		gap: 18px;
	}

	.stack-card {
		display: grid;
		gap: 16px;
		padding: 22px;
		border-radius: 22px;
		background: var(--surface-panel);
		border: 1px solid var(--glass-stroke);
	}

	.stack-card ul {
		margin: 0;
		padding-left: 1.1rem;
		display: grid;
		gap: 8px;
		color: var(--text-muted);
	}

	.contact__grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
		gap: 18px;
	}

	.contact-card {
		display: grid;
		gap: 6px;
		padding: 20px;
		border-radius: 20px;
		border: 1px solid var(--glass-stroke);
		background: var(--surface-card);
		box-shadow: var(--shadow-soft);
		text-decoration: none;
		color: inherit;
		transition: transform 0.2s ease, box-shadow 0.2s ease;
	}

	.contact-card:hover {
		transform: translateY(-3px);
		box-shadow: var(--shadow-medium);
	}

	.contact-card .label {
		display: inline-flex;
		align-items: center;
		gap: 10px;
		font-weight: 600;
	}

	.contact-card .label i {
		font-size: 1.2rem;
	}

	.contact-card .value {
		color: var(--text-muted);
		font-size: 0.95rem;
		word-break: break-word;
	}

	@media (min-width: 960px) {
		.hero {
			grid-template-columns: minmax(0, 1fr) minmax(0, 360px);
			grid-template-areas: 'content portrait';
		}

		.hero__content {
			padding-right: 16px;
		}

		.hero__portrait {
			justify-self: center;
		}
	}

	@media (max-width: 768px) {
		.hero {
			padding: 32px 0 48px;
		}

		.hero__badge {
			font-size: 0.9rem;
		}
	}
</style>
